{"version":3,"sources":["App.js","reducers/submittedReducer.js","actions/submittedAction.js","actions/deleteAction.js","actions/dragEnterAction.js","actions/dragLeaveAction.js","actions/dropAction.js","serviceWorker.js","index.js"],"names":["ToDos","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","inputSubmitted","inputStyle","handleChange","bind","assertThisInitialized","handleSubmit","onClickToDoDelete","onDrop","onDragStart","onDragEnter","onDragOver","onDrag","onDragEnd","event","setState","target","value","preventDefault","toDoSubmitted","index","toDoDeleted","forceUpdate","e","item","dataTransfer","setData","style","opacity","dragEnter","dragLeave","drop","_this2","todos","map","react_default","a","createElement","key","className","index_es","icon","draggable","onDragLeave","onClick","renderToDoSingles","onSubmit","type","onChange","React","Component","store","createStore","arguments","length","undefined","action","newStateAdd","assign","trim","toConsumableArray","concat","Array","fill","newStateDel","splice","newStateDragEnter","newStateDragLeave","newStateDrop","droppedContent","getData","droppedIndex","applyMiddleware","thunk","Container","connect","dispatch","addToDo","deleteToDo","dragEnterAction","dragLeaveAction","dropAction","ToDoRedux","react_redux_es","Boolean","window","location","hostname","match","library","add","faPlus","faTrash","faArrowsAltV","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAmBMA,cAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAQ,GACRC,eAAgB,GACdC,WAAa,CAAC,UAElBV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACpBA,EAAKc,aAAed,EAAKc,aAAaF,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACpBA,EAAKe,kBAAoBf,EAAKe,kBAAkBH,KAAvBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACzBA,EAAKgB,OAAShB,EAAKgB,OAAOJ,KAAZX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACdA,EAAKiB,YAAcjB,EAAKiB,YAAYL,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACnBA,EAAKkB,YAAclB,EAAKkB,YAAYN,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACnBA,EAAKmB,WAAanB,EAAKmB,WAAWP,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAClBA,EAAKoB,OAASpB,EAAKoB,OAAOR,KAAZX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACdA,EAAKqB,UAAYrB,EAAKqB,UAAUT,KAAfX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAfAA,4EAqBRsB,GACXnB,KAAKoB,SAAS,CAACf,MAAOc,EAAME,OAAOC,6CAIxBH,GACXA,EAAMI,iBACNvB,KAAKJ,MAAM4B,cAAcxB,KAAKI,MAAMC,OACpCL,KAAKoB,SAAS,CAACf,MAAO,+CAINoB,GAChBzB,KAAKJ,MAAM8B,YAAYD,GACvBzB,KAAK2B,kDAKKC,EAAGC,EAAMJ,GACnBG,EAAEE,aAAaC,QAAQ,UAAWF,GAClCD,EAAEE,aAAaC,QAAQ,QAASN,kCAG3BG,GACLA,EAAEP,OAAOW,MAAMC,QAAU,wCAGjBL,GACRA,EAAEP,OAAOW,MAAMC,QAAU,wCAGfL,EAAGC,EAAMJ,GACnBG,EAAEL,iBACFvB,KAAKJ,MAAMsC,UAAUT,GACrBzB,KAAK2B,kDAGKC,EAAGC,EAAMJ,GACnBG,EAAEL,iBACFvB,KAAKJ,MAAMuC,UAAUV,GACrBzB,KAAK2B,iDAGIC,EAAGC,EAAMJ,GAClBG,EAAEL,gDAGGK,EAAGH,GACRzB,KAAKJ,MAAMwC,KAAKR,EAAGH,GACnBzB,KAAK2B,0DAIa,IAAAU,EAAArC,KAalB,OAZeA,KAAKJ,MAAMQ,MAAMkC,MAAMC,IAAI,SAACV,EAAMJ,GAAP,OACxCe,EAAAC,EAAAC,cAAA,OAAKC,IAAKlB,EAAOmB,UAAU,YAC1BJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAiBC,KAAK,eAAeF,UAAU,cACnDJ,EAAAC,EAAAC,cAAA,OAAKE,UAAWP,EAAKzC,MAAMQ,MAAM4B,MAAMP,GAASsB,UAAU,OAAOjC,YAAa,SAACc,GAAD,OAAKS,EAAKvB,YAAYc,EAAGC,EAAMJ,IAASR,OAAQ,SAACW,GAAD,OAAKS,EAAKpB,OAAOW,IAAIV,UAAW,SAACU,GAAD,OAAKS,EAAKnB,UAAUU,IAClKb,YAAa,SAACa,GAAD,OAAKS,EAAKtB,YAAYa,EAAGC,EAAMJ,IAAQT,WAAY,SAACY,GAAD,OAAKS,EAAKrB,WAAWY,EAAGC,EAAMJ,IAAUuB,YAAa,SAACpB,GAAD,OAAKS,EAAKW,YAAYpB,EAAGC,EAAMJ,IAAUZ,OAAQ,SAACe,GAAD,OAAKS,EAAKxB,OAAOe,EAAGH,KACvMI,GAEHW,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAAeK,QAAS,kBAAMZ,EAAKzB,kBAAkBa,KAAvE,IAAgFe,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAiBC,KAAK,QAAQF,UAAU,SAAxH,yCAYJ,OACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACfJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,WAAd,uBACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACd5C,KAAKkD,qBAENV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACfJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,OAAOO,SAAUnD,KAAKW,cACpC6B,EAAAC,EAAAC,cAAA,SAAOE,UAAU,QAAQQ,KAAK,OAAO9B,MAAOtB,KAAKI,MAAMC,MAAOgD,SAAUrD,KAAKQ,eAC/EgC,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAAeQ,KAAK,SAAS9B,MAAM,UAArD,IAA+DkB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAiBC,KAAK,OAAOF,UAAU,SAAtG,eA1GkBU,IAAMC,WAqHpBC,EAAQC,YCxIC,WAAoD,IAAnDrD,EAAmDsD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA3C,CAACpB,MAAO,GAAIN,MAAQ,CAAC,UAAW6B,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClE,OAAQC,EAAOT,MAEd,IAAK,MACH,IAAIU,EAAchE,OAAOiE,OAAO3D,GAGhC,OAFGyD,EAAOxD,MAAM2D,SAASF,EAAYxB,MAAZxC,OAAAmE,EAAA,EAAAnE,CAAwBgE,EAAYxB,OAApC4B,OAAA,CAA2CL,EAAOxD,SAC3EyD,EAAY9B,MAAQmC,MAAML,EAAYxB,MAAMqB,OAAO,GAAGS,KAAK,SACpDN,EAER,IAAK,SACJ,IAAIO,EAAcvE,OAAOiE,OAAO3D,GAEhC,OADAiE,EAAY/B,MAAMgC,OAAOT,EAAOpC,MAAM,GAC/B4C,EAET,IAAK,YACH,IAAIE,EAAoBzE,OAAOiE,OAAO3D,GAEtC,OADAmE,EAAkBvC,MAAM6B,EAAOpC,OAAS,eACjC8C,EAET,IAAK,YACH,IAAIC,EAAoB1E,OAAOiE,OAAO3D,GAEtC,OADAoE,EAAkBxC,MAAQmC,MAAMK,EAAkBlC,MAAMqB,OAAO,GAAGS,KAAK,SAChEI,EAET,IAAK,OACH,IAAIC,EAAe3E,OAAOiE,OAAO3D,GAC7BsE,EAAiBb,EAAOjC,EAAEE,aAAa6C,QAAQ,WAC/CC,EAAef,EAAOjC,EAAEE,aAAa6C,QAAQ,SAMjD,OAJAF,EAAanC,MAAMgC,OAAOM,EAAc,GACxCH,EAAanC,MAAMgC,OAAOT,EAAOpC,MAAM,EAAEiD,GAEzCD,EAAazC,MAAQmC,MAAMM,EAAanC,MAAMqB,OAAO,GAAGS,KAAK,SACtDK,EAET,QACC,OAAOrE,IDoGkCyE,YAAgBC,MA4BtDC,EAAYC,YA1BM,SAAC5E,GACvB,MAAO,CACLA,MAAOA,IAIgB,SAAC6E,GAC1B,MAAO,CACLzD,cAAe,SAACnB,GACd4E,EEnJiB,SAAC5E,GACvB,MAAM,CACL+C,KAAM,MACN/C,MAAOA,GFgJM6E,CAAQ7E,KAEnBqB,YAAa,SAACD,GACZwD,EGtJoB,SAACxD,GAC1B,MAAM,CACL2B,KAAM,SACN3B,MAAOA,GHmJM0D,CAAW1D,KAEtBS,UAAY,SAACT,GACXwD,EIzJyB,SAACxD,GAChC,MAAO,CACL2B,KAAM,YACN3B,MAAOA,GJsJM2D,CAAgB3D,KAE3BU,UAAY,SAACV,GACXwD,EK5JyB,SAACxD,GAChC,MAAO,CACL2B,KAAM,YACN3B,MAAOA,GLyJM4D,CAAgB5D,KAE3BW,KAAO,SAACR,EAAGH,GACTwD,EM/JoB,SAACrD,EAAGH,GAC9B,MAAO,CACL2B,KAAM,OACN3B,MAAOA,EACPG,EAAGA,GN2JU0D,CAAW1D,EAAGH,OAKXuD,CAA6CrF,GAmBhD4F,mLATZ,OACE/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAUhC,MAAOA,GACfhB,EAAAC,EAAAC,cAACqC,EAAD,cALiBzB,IAAMC,WO/JVkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ECVNC,IAAQC,IAAIC,IAAQC,IAASC,KAG7BC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2f1257e7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport submittedReducer from './reducers/submittedReducer';\r\nimport { Provider, connect } from 'react-redux';\r\nimport { addToDo } from './actions/submittedAction'\r\nimport { deleteToDo } from './actions/deleteAction'\r\nimport { dragEnterAction } from './actions/dragEnterAction'\r\nimport { dragLeaveAction } from './actions/dragLeaveAction'\r\nimport { dropAction } from './actions/dropAction'\r\n\r\n\r\nimport './index.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\n// TODOS COMPONENT--------------------------------------------------------------\r\n\r\nclass ToDos extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input : \"\", // holding the user's input\r\n      inputSubmitted: [], // full list of todos submitted by user\r\n        inputStyle : [\"input\"], // style of the singe todo divs, by default normal style, updates when dragged over the element. This is used as className in the rendered divs\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.onClickToDoDelete = this.onClickToDoDelete.bind(this);\r\n    this.onDrop = this.onDrop.bind(this);\r\n    this.onDragStart = this.onDragStart.bind(this);\r\n    this.onDragEnter = this.onDragEnter.bind(this);\r\n    this.onDragOver = this.onDragOver.bind(this);\r\n    this.onDrag = this.onDrag.bind(this);\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n// FUNCTIONS FOR HANDLING INPUT AND BUTTON CLICKS   ----------------------------\r\n\r\n// get & save the user's input\r\nhandleChange(event) {\r\n  this.setState({input: event.target.value});\r\n  }\r\n\r\n// Update the array of todos when user submits new todo\r\nhandleSubmit(event) {\r\n  event.preventDefault();\r\n  this.props.toDoSubmitted(this.state.input);\r\n  this.setState({input: \"\"}); // finallly clear the input state for next sumbit\r\n}\r\n\r\n// Delete the currently clicked todo from the array------\r\nonClickToDoDelete(index){\r\n  this.props.toDoDeleted(index);\r\n  this.forceUpdate()\r\n  }\r\n\r\n\r\n// FUNCTIONS FOR HANDLING DRAG & DROP ------------------------------------------\r\nonDragStart(e, item, index){\r\n  e.dataTransfer.setData(\"content\", item); //save the content\r\n  e.dataTransfer.setData(\"index\", index); //and the index of the the currently dragged item\r\n}\r\n\r\nonDrag(e){\r\n  e.target.style.opacity = \"0.4\"; //reduce opacity of currently dragged item\r\n}\r\n\r\nonDragEnd(e){\r\n  e.target.style.opacity = \"1\"; // set back opacity of currently dragged item when dropped\r\n}\r\n\r\nonDragEnter(e, item, index){\r\n  e.preventDefault();\r\n  this.props.dragEnter(index); //call the action Creator from mapDispatchToProps\r\n  this.forceUpdate()\r\n}\r\n\r\nonDragLeave(e, item, index){ //set back the array of styles\r\n  e.preventDefault();\r\n  this.props.dragLeave(index); //call the action Creator from mapDispatchToProps\r\n  this.forceUpdate()\r\n}\r\n\r\nonDragOver(e, item, index){\r\n  e.preventDefault(); //needed to allow onDrop event\r\n}\r\n\r\nonDrop(e, index){ //index is here the index of the element that the mouse is currently positioned over, not the index of the dragged item\r\n  this.props.drop(e, index); //call the action Creator from mapDispatchToProps\r\n  this.forceUpdate()\r\n}\r\n\r\n//RENDER FUNCTION - render a div with a todo for every single element in the list array using map\r\nrenderToDoSingles() {\r\n  let toDoList = this.props.state.todos.map((item, index) => (\r\n    <div key={index} className=\"toDoWrap\">\r\n     <div><FontAwesomeIcon icon=\"arrows-alt-v\" className=\"iconDrag\" /></div>\r\n      <div className={this.props.state.style[index]}  draggable=\"true\" onDragStart={(e)=>this.onDragStart(e, item, index)}  onDrag={(e)=>this.onDrag(e)} onDragEnd={(e)=>this.onDragEnd(e)}\r\n                      onDragEnter={(e)=>this.onDragEnter(e, item, index)} onDragOver={(e)=>this.onDragOver(e, item, index)}   onDragLeave={(e)=>this.onDragLeave(e, item, index)}   onDrop={(e)=>this.onDrop(e, index)} >\r\n        {item}\r\n      </div>\r\n      <button className=\"actionButton\" onClick={() => this.onClickToDoDelete(index)}> <FontAwesomeIcon icon=\"trash\" className=\"icon\" /> </button>\r\n    </div>\r\n  )\r\n  )\r\n\r\n  return toDoList;\r\n}\r\n\r\n\r\n // render ------\r\n\r\n  render() {\r\n  return (\r\n  <div className=\"containerToDo\">\r\n  <h1 className=\"appName\">Draggable ToDo List</h1>\r\n  <div className=\"innerContainerToDo\"  >\r\n  {this.renderToDoSingles()}\r\n  </div>\r\n  <div className=\"innerContainerSubmit\"  >\r\n  <form className=\"form\" onSubmit={this.handleSubmit}>\r\n    <input className=\"input\" type=\"text\" value={this.state.input} onChange={this.handleChange} />\r\n  <button className=\"actionButton\" type=\"submit\" value=\"Submit\"> <FontAwesomeIcon icon=\"plus\" className=\"icon\" /> </button>\r\n  </form>\r\n  </div>\r\n  </div>\r\n)\r\n}\r\n}\r\n\r\n\r\n// REDUX -----------------------------------------------------------------------\r\n\r\nconst store = createStore(submittedReducer, applyMiddleware(thunk));\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    state: state,\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    toDoSubmitted: (input) => {\r\n      dispatch(addToDo(input))\r\n    },\r\n    toDoDeleted: (index) => {\r\n      dispatch(deleteToDo(index))\r\n    },\r\n    dragEnter : (index) => {\r\n      dispatch(dragEnterAction(index))\r\n    },\r\n    dragLeave : (index) => {\r\n      dispatch(dragLeaveAction(index))\r\n    },\r\n    drop : (e, index) => {\r\n      dispatch(dropAction(e, index))\r\n    },\r\n  }\r\n};\r\n\r\nconst Container = connect(mapStateToProps, mapDispatchToProps)(ToDos);\r\n\r\n\r\n// LIST COMPONENT---------------------------------------------------------------\r\n\r\n\r\n\r\nclass ToDoRedux extends React.Component {\r\n\r\n  render() {\r\n   return (\r\n     <Provider store={store}>\r\n       <Container />\r\n     </Provider>\r\n  )\r\n  }\r\n}\r\n\r\n\r\nexport default ToDoRedux\r\n","export default (state = {todos: [], style : [\"input\"]}, action) => {\r\n switch (action.type) {\r\n\r\n  case 'ADD':\r\n    let newStateAdd = Object.assign(state);\r\n    if(action.input.trim()) {newStateAdd.todos = [...newStateAdd.todos, action.input]}; //if the input isn't empty, add the input to the end of the list\r\n    newStateAdd.style = Array(newStateAdd.todos.length+1).fill(\"input\"); // also update the array of styles (css classes) which is used for the dragging visualization\r\n    return newStateAdd;\r\n\r\n   case 'DELETE':\r\n    let newStateDel = Object.assign(state);\r\n    newStateDel.todos.splice(action.index,1);\r\n    return newStateDel;\r\n\r\n  case \"DRAGENTER\" :\r\n    let newStateDragEnter = Object.assign(state);\r\n    newStateDragEnter.style[action.index] = \"inputDragged\"; // set a new style of the currently dragged-over item\r\n    return newStateDragEnter;\r\n\r\n  case \"DRAGLEAVE\" :\r\n    let newStateDragLeave = Object.assign(state);\r\n    newStateDragLeave.style = Array(newStateDragLeave.todos.length+1).fill(\"input\"); // reset all the elements to default style\r\n    return newStateDragLeave;\r\n\r\n  case \"DROP\" :\r\n    let newStateDrop = Object.assign(state);\r\n    let droppedContent = action.e.dataTransfer.getData(\"content\"); // get content of the draggen item\r\n    let droppedIndex = action.e.dataTransfer.getData(\"index\"); // and index of the dragged item\r\n\r\n    newStateDrop.todos.splice(droppedIndex, 1); //delete the dragged element from the original array position\r\n    newStateDrop.todos.splice(action.index,0,droppedContent); // and insert it in the new position\r\n\r\n    newStateDrop.style = Array(newStateDrop.todos.length+1).fill(\"input\"); //finally reset all the elements to default style\r\n    return newStateDrop;\r\n\r\n  default:\r\n   return state\r\n }\r\n}\r\n","export const addToDo = (input)  => {\r\n return{\r\n  type: 'ADD',\r\n  input: input\r\n }\r\n}\r\n","export const deleteToDo = (index) => {\r\n return{\r\n  type: 'DELETE',\r\n  index: index\r\n }\r\n}\r\n","export const dragEnterAction = (index) => {\r\nreturn {\r\n  type: 'DRAGENTER',\r\n  index: index\r\n}\r\n}\r\n","export const dragLeaveAction = (index) => {\r\nreturn {\r\n  type: 'DRAGLEAVE',\r\n  index: index\r\n}\r\n}\r\n","export const dropAction = (e, index) => {\r\nreturn {\r\n  type: 'DROP',\r\n  index: index,\r\n  e: e\r\n}\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faPlus, faTrash, faArrowsAltV } from '@fortawesome/free-solid-svg-icons'\r\nlibrary.add(faPlus, faTrash, faArrowsAltV)\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}