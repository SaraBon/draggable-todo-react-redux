{"version":3,"sources":["App.js","reducers/submittedReducer.js","actions/submittedAction.js","actions/deleteAction.js","actions/dragEnterAction.js","actions/dragLeaveAction.js","actions/dropAction.js","serviceWorker.js","index.js"],"names":["ToDos","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","inputSubmitted","inputStyle","handleChange","bind","assertThisInitialized","handleSubmit","onClickToDoDelete","onDrop","onDragStart","onDragEnter","onDragOver","onDrag","onDragEnd","event","setState","target","value","preventDefault","toDoSubmitted","index","toDoDeleted","forceUpdate","e","item","dataTransfer","setData","style","opacity","dragEnter","dragLeave","drop","_this2","todos","map","react_default","a","createElement","key","className","index_es","icon","draggable","onDragLeave","onClick","renderToDoSingles","onSubmit","type","onChange","React","Component","store","createStore","arguments","length","undefined","action","newStateAdd","assign","trim","toConsumableArray","concat","Array","fill","newStateDel","splice","newStateDragEnter","newStateDragLeave","newStateDrop","droppedContent","getData","droppedIndex","applyMiddleware","thunk","Container","connect","dispatch","addToDo","deleteToDo","dragEnterAction","dragLeaveAction","dropAction","ToDoRedux","react_redux_es","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edfdf86e.chunk.js","sourcesContent":["import React from 'react';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport submittedReducer from './reducers/submittedReducer';\nimport { Provider, connect } from 'react-redux';\nimport { addToDo } from './actions/submittedAction'\nimport { deleteToDo } from './actions/deleteAction'\nimport { dragEnterAction } from './actions/dragEnterAction'\nimport { dragLeaveAction } from './actions/dragLeaveAction'\nimport { dropAction } from './actions/dropAction'\n\n\nimport './index.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\n// TODOS COMPONENT--------------------------------------------------------------\n\nclass ToDos extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      input : \"\", // holding the user's input\n      inputSubmitted: [], // full list of todos submitted by user\n        inputStyle : [\"input\"], // style of the singe todo divs, by default normal style, updates when dragged over the element. This is used as className in the rendered divs\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onClickToDoDelete = this.onClickToDoDelete.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.onDragStart = this.onDragStart.bind(this);\n    this.onDragEnter = this.onDragEnter.bind(this);\n    this.onDragOver = this.onDragOver.bind(this);\n    this.onDrag = this.onDrag.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n// FUNCTIONS FOR HANDLING INPUT AND BUTTON CLICKS   ----------------------------\n\n// get & save the user's input\nhandleChange(event) {\n  this.setState({input: event.target.value});\n  }\n\n// Update the array of todos when user submits new todo\nhandleSubmit(event) {\n  event.preventDefault();\n  this.props.toDoSubmitted(this.state.input);\n  this.setState({input: \"\"}); // finallly clear the input state for next sumbit\n}\n\n// Delete the currently clicked todo from the array------\nonClickToDoDelete(index){\n  this.props.toDoDeleted(index);\n  this.forceUpdate()\n  }\n\n\n// FUNCTIONS FOR HANDLING DRAG & DROP ------------------------------------------\nonDragStart(e, item, index){\n  e.dataTransfer.setData(\"content\", item); //save the content\n  e.dataTransfer.setData(\"index\", index); //and the index of the the currently dragged item\n}\n\nonDrag(e){\n  e.target.style.opacity = \"0.4\"; //reduce opacity of currently dragged item\n}\n\nonDragEnd(e){\n  e.target.style.opacity = \"1\"; // set back opacity of currently dragged item when dropped\n}\n\nonDragEnter(e, item, index){\n  e.preventDefault();\n  this.props.dragEnter(index); //call the action Creator from mapDispatchToProps\n  this.forceUpdate()\n}\n\nonDragLeave(e, item, index){ //set back the array of styles\n  e.preventDefault();\n  this.props.dragLeave(index); //call the action Creator from mapDispatchToProps\n  this.forceUpdate()\n}\n\nonDragOver(e, item, index){\n  e.preventDefault(); //needed to allow onDrop event\n}\n\nonDrop(e, index){ //index is here the index of the element that the mouse is currently positioned over, not the index of the dragged item\n  this.props.drop(e, index); //call the action Creator from mapDispatchToProps\n  this.forceUpdate()\n}\n\n//RENDER FUNCTION - render a div with a todo for every single element in the list array using map\nrenderToDoSingles() {\n  let toDoList = this.props.state.todos.map((item, index) => (\n    <div key={index} className=\"toDoWrap\">\n     <div><FontAwesomeIcon icon=\"arrows-alt-v\" className=\"iconDrag\" /></div>\n      <div className={this.props.state.style[index]}  draggable=\"true\" onDragStart={(e)=>this.onDragStart(e, item, index)}  onDrag={(e)=>this.onDrag(e)} onDragEnd={(e)=>this.onDragEnd(e)}\n                      onDragEnter={(e)=>this.onDragEnter(e, item, index)} onDragOver={(e)=>this.onDragOver(e, item, index)}   onDragLeave={(e)=>this.onDragLeave(e, item, index)}   onDrop={(e)=>this.onDrop(e, index)} >\n        {item}\n      </div>\n      <button className=\"actionButton\" onClick={() => this.onClickToDoDelete(index)}> <FontAwesomeIcon icon=\"trash\" className=\"icon\" /> </button>\n    </div>\n  )\n  )\n\n  return toDoList;\n}\n\n\n // render ------\n\n  render() {\n  return (\n  <div className=\"containerToDo\">\n  <h1 className=\"appName\">Draggable ToDo List</h1>\n  <div className=\"innerContainerToDo\"  >\n  {this.renderToDoSingles()}\n  </div>\n  <div className=\"innerContainerSubmit\"  >\n  <form className=\"form\" onSubmit={this.handleSubmit}>\n    <input className=\"input\" type=\"text\" value={this.state.input} onChange={this.handleChange} />\n  <button className=\"actionButton\" type=\"submit\" value=\"Submit\"> <FontAwesomeIcon icon=\"plus\" className=\"icon\" /> </button>\n  </form>\n  </div>\n  </div>\n)\n}\n}\n\n\n// REDUX -----------------------------------------------------------------------\n\nconst store = createStore(submittedReducer, applyMiddleware(thunk));\n\nconst mapStateToProps = (state) => {\n  return {\n    state: state,\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    toDoSubmitted: (input) => {\n      dispatch(addToDo(input))\n    },\n    toDoDeleted: (index) => {\n      dispatch(deleteToDo(index))\n    },\n    dragEnter : (index) => {\n      dispatch(dragEnterAction(index))\n    },\n    dragLeave : (index) => {\n      dispatch(dragLeaveAction(index))\n    },\n    drop : (e, index) => {\n      dispatch(dropAction(e, index))\n    },\n  }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(ToDos);\n\n\n// LIST COMPONENT---------------------------------------------------------------\n\n\n\nclass ToDoRedux extends React.Component {\n\n  render() {\n   return (\n     <Provider store={store}>\n       <Container />\n     </Provider>\n  )\n  }\n}\n\n\nexport default ToDoRedux\n","export default (state = {todos: [], style : [\"input\"]}, action) => {\r\n switch (action.type) {\r\n\r\n  case 'ADD':\r\n    let newStateAdd = Object.assign(state);\r\n    if(action.input.trim()) {newStateAdd.todos = [...newStateAdd.todos, action.input]}; //if the input isn't empty, add the input to the end of the list\r\n    newStateAdd.style = Array(newStateAdd.todos.length+1).fill(\"input\"); // also update the array of styles (css classes) which is used for the dragging visualization\r\n    return newStateAdd;\r\n\r\n   case 'DELETE':\r\n    let newStateDel = Object.assign(state);\r\n    newStateDel.todos.splice(action.index,1);\r\n    return newStateDel;\r\n\r\n  case \"DRAGENTER\" :\r\n    let newStateDragEnter = Object.assign(state);\r\n    newStateDragEnter.style[action.index] = \"inputDragged\"; // set a new style of the currently dragged-over item\r\n    return newStateDragEnter;\r\n\r\n  case \"DRAGLEAVE\" :\r\n    let newStateDragLeave = Object.assign(state);\r\n    newStateDragLeave.style = Array(newStateDragLeave.todos.length+1).fill(\"input\"); // reset all the elements to default style\r\n    return newStateDragLeave;\r\n\r\n  case \"DROP\" :\r\n    let newStateDrop = Object.assign(state);\r\n    let droppedContent = action.e.dataTransfer.getData(\"content\"); // get content of the draggen item\r\n    let droppedIndex = action.e.dataTransfer.getData(\"index\"); // and index of the dragged item\r\n\r\n    newStateDrop.todos.splice(droppedIndex, 1); //delete the dragged element from the original array position\r\n    newStateDrop.todos.splice(action.index,0,droppedContent); // and insert it in the new position\r\n\r\n    newStateDrop.style = Array(newStateDrop.todos.length+1).fill(\"input\"); //finally reset all the elements to default style\r\n    return newStateDrop;\r\n\r\n  default:\r\n   return state\r\n }\r\n}\r\n","export const addToDo = (input)  => {\r\n return{\r\n  type: 'ADD',\r\n  input: input\r\n }\r\n}\r\n","export const deleteToDo = (index) => {\r\n return{\r\n  type: 'DELETE',\r\n  index: index\r\n }\r\n}\r\n","export const dragEnterAction = (index) => {\r\nreturn {\r\n  type: 'DRAGENTER',\r\n  index: index\r\n}\r\n}\r\n","export const dragLeaveAction = (index) => {\r\nreturn {\r\n  type: 'DRAGLEAVE',\r\n  index: index\r\n}\r\n}\r\n","export const dropAction = (e, index) => {\r\nreturn {\r\n  type: 'DROP',\r\n  index: index,\r\n  e: e\r\n}\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}